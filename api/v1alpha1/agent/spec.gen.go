// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"P4v5k3WBf/zw+H8BAAD//wXpV9bEdgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
