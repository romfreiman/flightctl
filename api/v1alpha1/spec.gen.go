// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a3PctpbgX8H0nS3HmVbL9s1N3auq1JQi24k2fqgkObdmI88WmkR3Y0QCDABK7mRV",
	"tX9j/97+kikcPAiSIJst62WLXxKriefBwcF5nz8nCc8LzghTcrL350QmK5Jj+Od+UWQ0wYpy9opd/IoF",
	"/FoIXhChKIG/SPUBpynVbXF2VGui1gWZ7E2kEpQtJ1fTSUpkImih2072Jq/YBRWc5YQpdIEFxfOMoHOy",
	"3rnAWUlQgamQU0TZf5FEkRSlpR4GiZIpmpPJ1A3P57rB5Oqq9cs03MhJQRJYbJa9X0z2fvtz8q+CLCZ7",
	"k7/sVnDYtUDYjUDgatoEAcM50f+vb+t0RZD+gvgCqRVBuBqqWrSDSWTRf044IwOWeJjjJQnWeST4BU2J",
	"mFx9vPq4ARYKq1KeQgt9kmU+2fttciRIgWFZ08mJwkKZfx6XjJl/vRKCi8l08oGdM36pd3PA8yIjiqST",
	"j82tTSefdvTIOxdYaHBIPUVrDeGcrY/BIlrfqlW1Prlltj5U6259CjZSB5U8KfMci3UcZD8TnKnVejKd",
	"vCRLgVOSRsC0NWjqc1ZzdDYJJu9sE4FKvYFfrgZAqVYHnC3oso3f+htK4ONsMm1cCVyqlQNSpBvAYdom",
	"DLrbh+M3Hb30l9jNEeT3kgqSavD5iavBYpfgR6ySVXsa+BlRiTBDJCNAkihDc/hZkt9LwhLS3m1Gc6r0",
	"P4bd2CMiEsIUXhK45jllNNd49NwvlDJFluYKTyeSZCRRXOgJ+oZ9g+ckO3GNdccySYiUpytB5Ipn6aYB",
	"wnVddQHtxEKhA3juM0rJgjIigfRlVCpNBgGO+jeO5gSRTyQpNUWnrAe2MpiPKpLLTbswR3s11XA9NB0q",
	"wGIh8Dq+u4OjD8dE8lIk5C1nVHGx3VMR6wznd6A3s9B3jZzQpaZWx3pPUrVB2NkUCVIIIvWECCNhf1xw",
	"gTCSdMlIipKqL1oIngPkD/bbV7OgvxIhYcLWNTs6tN9q53dhfiMpMps1TxqV1aqAjuifMUMGpDN0QoTu",
	"iOSKl1mqScUFEXonCV8y+ocfDfAB0AQrvSuN/ILhDMH7P0WYpSjHaySIHheVLBgBmsgZessFQZQt+B5a",
	"KVXIvd3dJVWz87/LGeX6tPKSUbXeTThTgs5LxYXcTckFyXYlXe5gkayoIokqBdnFBd2BxTIgjrM8/Yuw",
	"ZytjROucsrQNyl8oS4GSINPSLLWCmP5Jb/r41ckpcuMbqBoABkdewVLDgbIFEaalP2fC0oJTpuCPJKOa",
	"cMlynlMlHbZoMM/QAWaMK339yiLFiqQzdMjQAc5JdoAluXVIaujJHQ2yKCxzonCKFd50yd8DiN4ShYHQ",
	"2Yva16PzapmLOp1IeP2uP4zp3nqPqttmMSXYpF157IHqnOcN3Ypw6OYGDR0R7iZHI6W4ZUrh3686LN9s",
	"Ohn9Kg56+7rP9qr5BI506z7olj5qQ7W2oxPm9LciFI57qR/vPwUuCiIQFrxkKcKolETsJIJomKKDk+Mp",
	"ynlKMpIiztB5OSeCEUUkohxgiQs6CzgNObt4PutfQpOqkE8FFUbkIgnX8Gwt0nY3wr4nGBc4oylVa2B7",
	"AF+qeSfTyYKLHCvDPP/1xaTNS08n5JMSuE9T4S9Z64Cbl6ehwtADI6wMZhHpZH4NXKRWWCEHYWDKNJQL",
	"XpQZ/DRfw6/7R4dIwnXRkIf2euOaptE8LxWeZxFth8GiKDN5uiJojiX5/rsdwhKekhQdvXpb/fuXg5O/",
	"PH+mVzNDbx1nviJIv0kzz2JSkgGHjkNk6ONTDUUID2S+VlFpDxhX8S6qPTlkqUEwWJLwCGH6GFIPVOr3",
	"Emd0QUkKypbYNCWNkLkPhy9v/5CCNUi8JBFM/wC/A8j1JoDsEngMzskamV7B7imDVVApyzrHX3shNiKv",
	"3nFcafUuUFjdPlwaNFB4PiTAjO1onufhurAJF4XgFzjbTQmjONtdYJqVgiDD/bmtwyb14vVrgSmTEbBr",
	"OYtqNmaNyCcqlWxRupA+RW+nHbAtwE0rqCGupWkP8CH3SlNVIG8RSBz4b0YhqU+Vh3dshn5h/JKhJGgo",
	"CNoHuJF0il4SRvX/NXheY5rBmjzuDZOV/SomVx81LV3gMtMU7OoqIqmHKBJsLYoYftzujVdnmhKFaSbh",
	"PeGMIKyvoXI4kJRCADui9Ek7PlYjupP0I4ogLNWpwEzCTKe0Sy+s2yFFc2Jm8ktTvi9JDZOk12VxU3GE",
	"GVcrImYhFmhuaKeuCg/5EqlpSHsVP5c5ZkgQnAKS2XaImouimTwHHTznpbIr9subxSbjcyAB6U+EEfNs",
	"x3c/c4zNbOlbGkJTh8YllkAN9SOWorIw04bv/PffRd95QbCMTf7NXFCyeIrM94qPcDM+kYP2OVBSdKM6",
	"ydCNNLAbaDGb+G8Vp3YF0xjC+e1Xp997VSqa6bTZp6LUw7zGmSRb668b49qxGr+6oRs/h6rnOhyC1TlK",
	"ZHTY7p+GKsGqLUnaB+UnNQ9P7Q93f4+wkND0ZM0S+Mf7CyIyXBSULZ0iVUP5V815akho0cMaRgqSuJ/f",
	"lpmiRUbeXzIi5EA4vWKCZ1lOmLJvV7CZzvdtSBsPic4WHkTHpOCSKi7WUfhosHR+aAEx/OgB+jojRHVA",
	"Fb45GL4kFzQhAYDNDyGYzS9NYBtUWdCls3s5uWeYLv4nqiLdr6b9vX7xrPAJSQRRW3U+ZBll5Bqz/qxU",
	"EesGMCil4vnNK7CnTRp6YlhVYzkCEpqb9vrNSGAVXgiQs7bAohdrTrJNn83vdV13sVpLmuAMpfBxNmqp",
	"Rn32qM+WuxV9HM6S2D7X0FTHOAgzWsuE3nYRiYuaDQ60w1UiyoDpTusOj4syn2shdOHYfI1llyuarECM",
	"gZ5OjN48jVRYqIgU9c7P4togx/x6rjI+esClDjuzuLtG8/Cs7sMAJli5n2XQAdYdAdoHqa/RxoPUjTSH",
	"boiuliEcaQDeWq6lInkInZtht/t9NZrw2ggV8852AUIQlhJB0s6Hx706FqFT97CZboHbxCaNSH2e3vVK",
	"npH2UpfHRwevLDWNKoek5u84O3wZ+dpYTm2ssGf3un7m/Fw6PqTxcC8UEcdkzjmwfG280l0rLwFojoRr",
	"jwgDdLMsB06srkK/UvqOWbHykqoVAqHZYp48Y1yAropqBgWdrogkvjtPklLYqYKDW2FpZwbNR5bxS70E",
	"fdULLtWO+YYUludydsaGmmsMiAwI9G4dNW/q62A9njceBqjSNr99OBlkdor6ZIXZkki0whcEzQlhTT2T",
	"5eO2hRJsn/RBaU4WXJDhCGXaBxgF5wqHehvAstMFWEUrpLoFpDHzDcYauzyPNncCjDjq6If6bpDmqpNu",
	"HcIOqep8C6V5Y4atozGafZ/ar5L9/ePQZZ1Ui/jMl9po+fwrTd08N/M49y3+eu9zz1ihKyuWsq4Vqnw/",
	"PzBZFgUXw71WozP7KaJf/bzRr9ViOj4HK/Q7jzuAVN/q3h7mdzmKzfft3BEcxBYEbPTbeGh+G9PtKH8n",
	"rb+2w4cZ9/1JnKmmedTcw6UShCD4akVtgT4cv9ksgpgBexfSJS3Gl9IQjd6fmFVFXxf48pIuO/0bUvjW",
	"HAt9Q2bLGZIr/OJv3+/hZ7PZ7OnAjdbn7N52g/9qCzdJhwFWr9rxQgqfE+Z4IU3fDENtRWTDGxp2yGkX",
	"ZugVTlZ2AH3dQydqDQIuUiO6rKGfId/pYKqjN7SfGMvsBqeXiCjpFD0bXPSTbgOuA641JXRgVlKUQ7nk",
	"cCDDaUwnKZXnn9M/Jzkfev9jIzRt2kU58YPa1Q2FTXcgyj+xsIExB4IqmuDs2iEpsYnDiJf212ry2Ndg",
	"QbHPbpGxb6GFMNCAtq9foA3qfpPDVoOvSDOWLHJPko6QGTev+Y4Ka8UZPnfUaNSafqUlu2HoWalnrqYT",
	"PrCTfXuMhtQyRG0eUq/GakgNr2HtRHWhb/jeG+ap2MYN4Uzb6JBjlayOsNIcZd3RL8ef3hC2VKvJ3ou/",
	"fT+dFKbRZG/yn7/hnT/2d/7Xs51/7J2d7fzv2dnZ2dm3H7/919hDtUms7BY0u1yWwq+hRSwutFXuS9jJ",
	"ysj21SycEphmRiudqBJnlVML7rGrDblCVpURqnPNWrZkdNtmhJgerK3j3Xr0ho57uLuUPwPzzsKDjK1O",
	"Q8Mx6jMUgnfoDXeeUX10ZfOWawpszUo52fJasroeIcNSnRACT/8w76MtCIqfpUZStn1ft2bPW8hgSMih",
	"VZ8MGKBqfzWdWBlnG+VU2mGOC7Cytqr6LZjEL0UIxvDoPQrB2VTrraAWHHM3D3IHZiJLV5zr280poW7A",
	"NtQbCvwevDvikcCVbno6OeKXRJD0/WJxTX6stopg1ta3YCGRr3Vuq/YpXG7kc20Hke8RXq12uaLvnW9h",
	"dRnGGZqmcrcsaQo6opLR30uSrRFNtaC/WIca4vYzFigI4tLYftBCU3lQuDnH5mrYFtZp4BirWSMOlnOF",
	"Dl9uM5ReMKjdzf7j63zvGqETJyAOnKApgIUg8ftor6L7BjT06teUfjkIwOhyRZgPPDCu/AuaEWSX4zyQ",
	"v2gReDrh7DXNhkcx68bvHQBiCymwWsXhq79o4Dp+G2w41rRCWcPmoiENNhoqTccEM2RVexwRCnYd7I4m",
	"sScjIECeKarhSwW49K0HIN5Gyb/+Jt64WcO+KubZu8lXpbbu670q7SGCV+VDccpfmjin96V6v7D/Dvwl",
	"r/OE1KYMpoh8DWeNdm44bta/tl6CkH1vyI3IsiJ13wnpbvciI0QhQVQpGEkN8VgQlazAaIkkZcuMIPAt",
	"7ZVpKhTrCgYb4GgeRC5MW/uYC4LPU37JencyX6OzcF1nk0CAaqGKbHJeD2Dxdk39C1dc4SxOr+BT4LgV",
	"m2mg47+52A8KOpbF7oNO08cfQDWNIGvz/BsbjtIWKs/v2ys4pfLcxLK1b2T3M+bfleiDVh+z/9mBOT7G",
	"PZGpFCXMup9l/BJHE5tEGtXTm5ALkoG0rz+TVC/OdjD0SfAs0+8QBQQpBF8KIiM22aXgZfHjulvbkuE5",
	"ydA5WQP3VBChERlBN+ePBNhYzY/direLEMzxpw8MX2CaQeRe9IBs3prg5jqgI9/TXwyXtctAIu4QmVO2",
	"v2FK/KkxZcnac/lj2DhnVC1X9sUuuRX4wGQ3mXf7NHyp4iixuaRm6IwBQrsu1hI+DzleDL7uXLMjFwTZ",
	"BaIztuB2/PkaYRMyVjKqZujEuQZUPwKfvHfGdtAT+QQWJE2ENfyUm59yykpFzE8r89OKl8L8kJofUryW",
	"4GoTakOf7/zj49lZ+u1vMl+lH6Na0CqmpUoa1cwW51rsWAehTfxVNeaJ7XA1nSxFkezkmOEl5GjaId0O",
	"jg1aEFlAz3AxitoK3GkjSqtJT/oeG48K3DZ061XJjj4bY6jDowt1aF2n7aIe2t1vNlVPRySfYXdb8oeJ",
	"32vhnPviInCJ1KwDSN9BcDY4IjunWmgfvGpzzjOCmTWUwNd91T3TPvAjenB4QLCyYRLhdJdY1mYapvZ3",
	"PWKcTPXNzd4I/NBfRVQeB+bncxKNmgFqikX7k+JgwVo33E03sur+PAfhRdxzL9qs7sTXajI+Dfftzhc9",
	"kkGavTb/MPr4faW5meIP12YKoJuZcw4aGnNyq+0TiRQWS2KNzm3KkEjRnjKRwkwQywgUZpKUJnLcZweJ",
	"AThtODIMD0G8AaK+3yTlLo+EZe/RJdU8dUXdqXRqYJDNNTZXQgEApQqy76f+GrLDjr3Dx6Oj4XbuHoMe",
	"h4oh2Yo0eU7matqfzSZEmRZetfPbzLZOW9NOxkI+gwb3eFlsl3CmLZ22eb5SrTSxSrxWYStxd79UkM02",
	"EFxL2ifwTifXlay9gB3JqRzsoJqgc1WDQAU7a/t2wkOzEyDLjiPebYwxbc/JuqtN8zQ7Bm8PNWgHnWce",
	"TqChxwVV6+59mMxZA5bfPawfJLpwsPG3veK6kgNBe5cTaKN61WeZuZpO6mbLuLp/XcAN9uZdQ7K1qOFj",
	"qLlVo9MMSIWzgh1AHjJwpMj5hTeAEe9aMdD6VVulH7T2q5+h9qufrtHWzG33HzeJa96GsA439iLDlCFF",
	"Pin0zYfT1zt/f4q4aCbvsyM46ueAE6Ojut0r3a0j8u/S5T1SRiUlNLcHs8zQ21ICL2dtv2cTWNzZRK/o",
	"bGLWdDaZoZfGQAJ8vm8Unhb8NJnaLu2jAT0eL4s4SPT2nkij254GilJnktaPjAtkYGVOBE3Q4cvmsgTn",
	"yqyqzRbylHRP/f//7/+TqCAipxDjDEkxZ+g/eAnsslmO8brINXO7wDnNKBaIJwpnJiYSo4xgfQLoDyK4",
	"iUmYomfff/cdnC6WZ0wzeAnNbQ/9usc7fffi2VPNsKuSpruSqKX+n6LJ+RrNrd4X+VixGTpcIM2Qe6BN",
	"z5heaWM7oH8E+z9KA6DpBZpAy7aGvttag+eSZ6WqvA8cirq77LxS33FFzI33mfPAdKGbAqs2J4hfEHEp",
	"qFIkbpkvJRG9WMMvIUnkjWNNzLDkL1yU9IIhur3W19aKHWiFLRubjgF7o/J3VP5WjlD6pmyn8DVdblbJ",
	"C2PGFXj+U11pBz+P9/jeNXXVOQxzvAOCParkvlKVHBzvsfEI6AwvNMoGXyNoiNdARabi9KFHpQfOQhvV",
	"eNaL4YhnNNkY3HBca/w5NYQUyYvMqnya0uNdpDZrelHG6XPTg8otuhMDujRywcfttHDGS21ozBW0niIC",
	"DCrOsjWild9b1cIk0dEXGZKZJS4Hd+Wq4LWckKH9cmVlwpbouZ1izbvcfX7IUtpy99wmZn7q0H4Q1a5f",
	"6y01eZC0mCbHpODeQS6qkV7gTJImiIdk9nVDuzDiUnQ4RH5TcEi5qp/cnCvyFDz9TaLWQUXQ9Mi2TXSr",
	"0Zyn7cxhVB3r3bQuPi+ZOvKSoHWTnOxOmqr5IysK2nBXyiyKx14EJ1lGkvC5rW8usRiAqXpqOSol0ZIf",
	"XNk1S5D5csaigZxAhI/JBZVxF/9Whja/vFbnaZfn4XRgychGnPDGc7dZAO3BxeYNghtqKXKbJTpIYnP2",
	"Dw6WeOX7RAl3MOTHdgXNIHB32GwmQiWNvxF2sHj5y9iKe6uaNjh0hnhhiILn9H959R8//Lr/5sMrU6tU",
	"o5wW5rFEJFLaVHpXwQom2zlnirJDtarZNs2t1+vrTRFlSVaCUgmzNcJiWebwrJVS/yYVZikWKZIrkmX6",
	"iij8yYaEmPIfVrUkUW6TL7uZJCpoAVm6luCrMtWbpgsTfHNJRFDkr2QpRJLMsVyhncQoHz/FDYqXXJy/",
	"pGKTXzBlgctKBUyvRhIlM6wzXSAK0llGFgqRvFBr/QO0841cyQuJVjzfKqxFn8dQVNvO+TpA+EEJomO4",
	"DX7OjYFa+K5oTuwzO/q8buHzetV77CGV+pwzr5+V3vbWlPKD7tTiE/SPccf4+AB71yt9bCkyHBji4a2t",
	"kCGI9nP31/q3a+EViFGFQ+bC40TVpoHhFzQjUyTLZAUE+BPWCDmzbDKoxr3TGZXAW1fFbPwXtwJcKo5S",
	"KhN+AXlbPaEAdbV+3fvCOTsjIH00nQNMsPnAr583wyLhFoRPhTO1vGK2wM5LKu2/oGgy/J8XJju//eGY",
	"ZBxDMDAmOWf2z2GGM4sLfjr7dzCrxXg3ufsT1mD/qpbif7ArcsPVFhZ5AL+w98GyZQFWRF8Ln91/S9kj",
	"wbNEqFg9Xkm+/84Z9pDgXJl6sBHmW8pLLtKueFLz1firl2plzFs/n54emRBKTZND51A/XCyo8pwWRsv1",
	"KxE+Yqg98ck5Laz44wpLXYQdYl6vKpODIHH65gScUZDVFg1auB78nKyHD64bDx2bn5Mua7n+dCOQ7y76",
	"dWoxG0jfhqmGvH/xMhWtt2OlVBEVMDVxPeoPbw5s4OhyRWxeXUFkwZkEyi4VF1VMOJg5TdR8LWJvFpcC",
	"71jolOViQT+1pzrCwpv7Pxy/scXYeE5kkKJ6jiV8naFDBdHbhtsn6PeSQPCcwDlRYAgwj+LeGdvVQNxV",
	"fNcplP8dGv8AjWNr7JN6/XHduaDrMKiLnF5TmbOqUeJhFVmGlncarASCmweHzlGCswxxgZKMM1PcO4ZF",
	"UB/ThIt24JMezuCaRs8UcZaZapquq5YQoeBPVRTOHfQMfYDHL6fLlQLsdlhpZERg5uGNsYueEzPJfO2O",
	"19pwkD4KLXfCSnz2AXhtVyQrDOUBu5ffkUMUfTTeCjLbRhE2DY81hjCHOV6GiaIc8Rqc2PKYLIiA2vcW",
	"eL4Chc1KGakMgQqcnA9xsupOw9lZTiiSPQGSxGyTgqIrxdytXmu7zthmewsvXVM62bjK6UTCZJu1ocPT",
	"gQBLXeBkQL5MC5WqxzSYdKMtxPaudhADa93sE8nJkOPCFiWdGgOn1XSBH48gaP/dS8jMolnnXVZmmQ1V",
	"dnYniSAFn5a3VpQt2zYK+PzqUyFMTYmNyPm22R6CllWyerO9Q/mAXH3eEBk1M+sv1q43JxI5y5gBj1wz",
	"tSKKJlVZLJSX0hh3Qt1cRqUy6fUvsKC8lN7ABMuQM7QfJFPEa2MdAhqunwW+QH9WtrYpcgu7ihqEFGVl",
	"zI/bfoHx5wT0mDQoBwt6TZTR3AjyqlZxB6iKT81ha/QGdXwDx3wiIJQNfOcAVD6KG+oFWCs6lYgX+PeS",
	"eB8E96goboqnuoqYPmLNkt7AUI6NkQzEey3iUdNKECUouTDPGCOflHPAquLJPdwPDFRMhpGEM0kleGLC",
	"WHpZ1tZu7TbEgczutJ5xR+/bpONJEeRJAOYVM4TRglw6XZU53AKSyxuQuKN3DiLm2a0nQjEKXdinP0kD",
	"SifzmpxZiQk4VhWkHZssTA1nYKOnqGSZZgbWvDTrESQh1IPSyiZaOMYMkdBpuKOeUo4po2x5qEh+oElY",
	"GwHbbXycoMczWc6lPm79DVDOrh6Oo6r1pA/F8sJWDnDH7zbo1UH2V4NC7tlOLQ0DL0lQgztiNtWdmtjv",
	"V+4WJVFp8t4A9hrw6mHcUYCyoWRwpViKeE6VqrIWSCIozugfpoBUbaFwukbPir6xno1zkmDNlBk9BpiM",
	"VyU71yPx6iuAwMITEiJBo6fVfgSxoDN42dyT2Yi3C1xrJ87HhWcmTRdm6OL57PnfUMqN1ypRwRwG9ylT",
	"hOlj1JvwclcMU74lUtEcWNlvzR2kf1ije8IzfX6wiAPwnfEqRT2vIEBIu8Y2HC3QCOENLDgZlpkm9qQ0",
	"XrA2Z2G1DR3aRfNOOwXgoZbZ3nEF/3/lylG/5ES+4wr+jvpfG/etbSrfN7gLo+TwK/rY3pcczG82AWIy",
	"ghyars/bPOhbyJh988lt9CYCp5UWiaq+aYSrP/ZaUCs0gYZy7dEH3xAoS5ggWYl7aKx6EdqakusR70HG",
	"uKp0y9cMmqsamwLL6zBiLpq/yZV0P6U5kQrnxfAssCnJyDW7LnsqSe8j8wgkngjXnO6CnHVBlWmv/JGQ",
	"p8b4WqGjZjl7oyqaoWOC0x3NYQ3MP/XZ0YxvDZ9tfQkh0Y9hCPU9tfofzEI2iIslZprGQbl6rMiSC/3n",
	"NzLhhfnVvFtPPT8zGaynCcUk2zZm7rhkJCo1BP6OWCF+CXX0wW3V/K65X3QG/nu7eqqzCTJA7irHGDJA",
	"HbZ5YBct/GBamyWUWl9aw5M9kYGba1WQovKeHabqPNIkK0gDU5XBH65t4h0BMEF8lDcJheE1OE0hz2+R",
	"GZlQmIiljz3ONc3z+Z8n79+hIw6Q6LZmAfLF12iYR8URToGZtauZtd4JsP90esM0KfsREQlhKqplqb45",
	"RsYetsGcOhEoqsamVe0e/+c3z589+z9g5P33357t/OPj0/8RTWt0bKswNjP/D35mgo6vrGNJ26zbXTyj",
	"Ca+hta07NVpXcdcYt89tCisMTN0fB2BvivNYXJsrcTko/Tk0vuNyCK2yoJ1U7MstmXCd4gfbFjWtqckj",
	"mtbqq09iY8NK61rrgF4uqbJK4CiNPO4x+RyHJp4gZOsnqkLzj0mLC4p7UlVJHaM/xiiuRx/FVd2g7UK5",
	"gn43G89VDRwP6qp/r0d2+W90jNO8//gu0TiNgS+jp/ZjqNdXGurVoDl7Q9nmZiTIRq/b0NNgU+MTuara",
	"blh1R4xSs8V2gUqhRX9gtFLQ5fNji+qD3W22HscP72dEqOMy5vjfqO/QlJhXZY7Zji810IjlA/DpseNp",
	"sjoTC7uUw7WEjPyCiMB/EV8QoeVYyHkNljGXLMXVj9QTaxEXvQYU2Gu7VoeO1Q136WnTWXpad5We1T2j",
	"z87Sf/tN5qt4HuCiR34/NYkonFjOF3ZHxjwo6HJJhIxC0mj5jDn+ggwpZVU77xPbKV6dwY0YHFNtH3VF",
	"3Ubkqk0W6OmjVRmhIM4wB9zOSaqBO5sEM3a2MUsJduNER32OVAMgp8wZH3JcFDbBzMHRh87be/QhpmY3",
	"qek7JeuOtPVO699pQ+i0CVx5yrV+B5qWiRWunSfWsMehYzebyH7fujboGDogcRU5pQ6VjaN2fSoHaIRE",
	"CdVg3jufAvNrAYZ/gyTAABkqsrUaoiK7sYzzwWlEc2ThvMgoWx5q7vUiVkvCU9E5UZeEMK89ga56X3dA",
	"GGshIx0RI7XkWcG2p+FRRXbcR3VO1iyJsQrV12YO8sBZDdxHrCuCSQgE4cSBakNx48UKjhOWswUJxpeo",
	"G4WgUc0xqjmC+7atoiPoedOqjmpop+wYb+v9qixs3zVLtn5FgdKPSouvVmnRoCCty1psjIzBvkpfLRau",
	"6c9/COWJXQubI7DqUd1RhSkzfqaxt9+46zN+xmQ5d92pvoFQpxGW0hjLuGC4ESAZKHAgZ8x6ndnr8TCi",
	"c9opISJBh9ahRNhWbXhvF1MzPJNE5OHoZQOvpzOq6NXnaYDw9Whfb4oZpwg54HlOO0LYjbMjNEArLFdV",
	"zlm9DpLGT96N/FOPG5IfPfAyig0+xEdwG1WWyXVjTfXEOjZGxfSG2CuVwIos18NlXkiEdWKdrUBr2cje",
	"4UbcGMrgW/Zsqcpw1UDi8LPTlLnKaoX5tZm/qKnbg1w1JonvaZXxoFf8LqsSrGkb2AOScDWPSA8Urzq3",
	"QQ3Q6gKRgxCudboSRK54tjGDSuBZE3VoOuFCvRepc+dyuX32ZdLK7mNL/jm3Ki6Uqbwb+iiZfi+JTKI2",
	"9xO5ulbEcyHoBVbkF7I+wlIWK4El6Y5dNt+NTC9XR77vQwhZri9oU2yx3Tc6Ofl5eHhx9JgDK8R2oJfh",
	"kW0wdNxSZKTefcPzwsVJ9sRH9kUGVpuK0aWuV9W+pNSoU1QpmGWuoeAyzlwxipSzJ65iLTLRKoEn5sCU",
	"7ENMD9WTbfh350DY4U2JZdzGkeNkRRnpnOpytW5MYAtb6jWcTV5jmpWCVAVPTewClVVQj8mwYMINIFqh",
	"zoNUoUD76BiWiZIMC0NsnIeN3ay+GGheaigTE/fAL4gQNCWIqg1lnaPH6bxdPfDQewiu2kNnkxNDbV0u",
	"dL/TWxdXtGy/g1m6I13h1wGX/NRmQewU7RsN6grC0CsWuYSKo7fDqOgbFX1Y7jauzna6vmbnm1X3NUaP",
	"uzdFGtV9nBoNRj+ne1caxk5kkPDcfAdG3eFXqjuMEaV2cp14QYpTX7X+csUl8S++u58L8Mrgm1NumPGH",
	"LK+q0j8oiCLMCj3dQM+uo+TyO7ZU6gZ8naoyop+v5bK4biq6Dome20af9PFKN9cw0qNnNCHMSNQmKGWy",
	"X+BkRdCL2bOJFcwm7mZdXl7OMHyecbHctX3l7pvDg1fvTl7tvJg9m61UDiXkFFWZHu59QRgy54neVrms",
	"948OJ9PJhXtUJiUzj0dqo14ZLuhkb/LX2bPZc6sSBZjqS7p78XwXl2q1WwWQLGN4/hNRJr1VLaQizM52",
	"mOoNl8qJhBCyAeHiMNmLZ88a5ZyCkJjd/7IylTnSTQcezAIH0Igz/UXv+7vnf4+8ryWo3JXfhYYRDFGD",
	"hc2fQzqh8attYEBi0pDFQOHaAdRdPim4sVQPsyLYJE5x6NIqGOfB0UTSj3HwNm43JBqA3QBInj3vakNZ",
	"1Wow4KaTv93goZpia5HzPLT8iHkIfbPg0IL6brbupnv4zE4yEqu9aH6vBbhrAnRQDXZiBnOBis0TfgkD",
	"dLaXt3kFPPPbhf7mrG/3ZD4wW03vD7hH04nCS9kouFc/EPCRi14pYKB7YVkHvmYDeps3Llx3OmrfUPPB",
	"JvmbM6dBaSvPaRnlZJhoxb5XMIIeAELQTcYe1Wz0xGUWeWKzQFjNTyHIBWStqafYgHxOk70JLKgiET4F",
	"TR9xmMZivk0ODuuJpARNVJUZA2zrNiGKC6o3Id1U2AKx9Vpf5IKItU9JFFtoVkuNdHerBdjKaZV7+8kP",
	"T6boyQ/6v1qSefIvPzyZQXk4dE7Wz3+AM3o+PSfrF/9i/njxtGtPMPb19hTmgw5znxgU89sJM7JU2VZO",
	"q5w4kDrEpProRqlad0QXdXyG2nFm0EayG3BoXxHWSjddXRFwcAsSyQCEOnGA5hA8WMEptOb99UXUmvdn",
	"r73E7FNxYziZw9Q2WfFkz7P7M58Rrb0o3fHH9Xan12uz8bMbq03XnMY8NB1K332Pzrf+Rmh7JwkF/UfP",
	"83IHD/+POEVBrfeH/KQVXEaTMpnMSAGQkYVy6z0z5VT7mA872o88Xd/+8RvYVIKQEiW5ug887MbBFzeI",
	"D1tNb44qNWt4cT9r2E8SUvhF/P3mLkazNnh08kwQnK4hoFPYRYwUIaQIg4ST3T/183A1SEaJkBB0Tblk",
	"E28cuoH1TwtPnS3mal86+/DWCcc1BNn7Iir3gFJ60u9uf9J3XL3mJftsQU1f/UZ9hWSwyHxMcHptxKxU",
	"g1VyIhHB1Naon4+n00nJ6O8lsVnV4DUcUfcBo27hilDWRyqwUKZwoNELNxB5uO4HMljdCInt3scNEtih",
	"nOMOwO3ftju3WjavK8s4jnxiyCc+Eu7ozumBnvAftz/hAWeLjLok18MIUBl9OyHP27WpzrHpf9Os3S08",
	"mFvSnVFiHSnRSIlugxJtI4nu4qIQ3AeJd4mkbH1tAvaSsPUXQL1Gdv+xXqpOXa65Gtd/uvdN/y/n6X5I",
	"mD4+WV/w7TKuCtUdezBuI7bG/jV8RGy9/Q7Na/X1kbp/2HL1/b4eXTB8Q6Wqvo1eHKMXx+jF8eV7cewj",
	"G72JFhleQh0qW24TEiTo1eQ5Fuu6C7CcoX/qnQCoOAK+pV6xFCBZy7UAd9wOFngv2+xcAHAovPDEIFIN",
	"w5+EZT+xIA7/XJ2oJ3ZgPdQTiKUWZeclD9rGsMxHs44uL3fr8mIel9G/xXKAf70TltMlv+viE+JCl6nm",
	"g7BlFjqcZvzH29A32sEHKRef38qsoyrvXsSUGJ62hYdtfDg6kDgUGrbRAvgeD13k70bmR2m43iQdRRws",
	"OjDnmOB0GN4YdSYa0eerQp8OJwewxzvGzeNQGschaLw98UlvHHu+GheFzfg6qjO/InVmx9Ucbv7vJO7Q",
	"+CHwBffLVd/dzRw5+JEU3JnIsBvU5YvygfbMbOl0noGij9lseG1qAY1d+b6vnh30dQpH8/gDR3NXtrAT",
	"z5dWD74os8wXHzYZJxZcDONifyIqUoVzwy14d1v87LQz2ampa9+s5BjXoELb41bT+7l1Eej2PKPftU/5",
	"HUduIePtfDi3s8q81a2LkLUMf1toJU5c1r1Rp/WIlBJ9ks/WqBTIQA8Bmx6LJDQKJnd3ZQLiTHz0rcmz",
	"E1gXOrMymZbAKpnulC2d+bx1oarwXp+laWPInbtR1gMyRQcnx18AhW5tdUT2u0J21Mb2JmZ34f1nJG6q",
	"DrzLMa8V3P6IffRaIN/grlfBDvXmZIrCePTiG734Ri++MRfT6Ji2Ve6V0UdtyJvVn3up6mPS1fZ6krWz",
	"39yO0NeRZefu/MsGpfmp5TkaUww9Hn+32D3r5da38YJrM5JDufVtVD/RWb4ckXWM/ry2tBJxn6vgGlVW",
	"b41ohvlhSyIKQc3DUse5EeW+VpTbwq9nAKGz+u0bonRfRP6Oa7I+94Lx98lxjUrJr9Uqe13uqpadoz9e",
	"xjZs29lixCKap+BRk6R9B+j7Jk31hYy2izslEy9e3MUuC8ETIiWeZ+QVU1St7zlBwg3Qqc/xKdlMoKIc",
	"+/a+ASOz/siZ9c/BwDjX/sCQ8HHz7uMFCIk1VJe7jlH9tekY19D5j4/Uhm5r9vXazTsA+IZK5T+N5vHR",
	"PD6ax79887hLaQNecx5y1hdPr4fgZGXKhXYsA6fWdVoe8JKpMW/MAzLPA7keTfJdT+CGDC6vLdbHzO7u",
	"223wrGbsOzavB5OOCt771rc6FG2xw7t/wv+vdl0JY1tC9zp8crMKchfL3KxGvon7008fpCtzvFlrollc",
	"ZlwEd+r+NRcPm49vnP8Gjn7zUetH4gEf9HQUMUYRYxQxRg/ckcVvzNMg2iOzv+mdHM5TbeMi2Hz6hvFS",
	"n/3C3t4DG+r8B876oAxPTUiPWvctGceIU+JGJD8mOP1yUPzdiOKPBMUjNH84aY+rgQJz0jbm09ehJvUB",
	"41anOmhMVXQX5bE2mOkitDmOpZogD8LRSHqtm0TVTrtDVxZ9JwkNszycmDH6bQ/jdbkrAhxo2LdJ97qI",
	"ojC03ZrOLm6azn41uV43ouronfl1OnEHt3J4REjXswJt75/7uVfj253dydHON9KAm+Iou0Shz3KB3sB8",
	"bu9lOopJXzjfdx035s1vzQNApMfx4jxSxA2IoyAFl1RxQa9VbvM47B7XHTWaPFJHBg/n9QYfBtEH0TdU",
	"qgY8Rw/l0X1gdB8Y3QdG94H+JOmO/I6eA70P0wZf4aB13GH4OGxwG2xkMMEduw43Zx71Cvet6qvhbgdT",
	"u40JtAe7G7zsehvhrDbsQxf1+7H8UYpNQ3j3iKmyB5uOCU5HXBpxaTvDYQ9CWcvaw8Gor8aOOAyHR0PC",
	"12ZIaF7U4bbEXroPHb7Ei3p7HPrd3tVRIhgJxM0TiJrwIXkpEiLXLLmeSt30P1mzpFMMqZo8ap16BemN",
	"WvWgaVyrXoP6qFUftepCUbZEBlW40CA+JzE1OwI1+xSdTbo07WeTpzP0mguETSlNt5BqbD2W1bDKKRJk",
	"YRAKPEV5UuaEKcDXUWU/quwfjcq+osij0n7Dy7dRbd/z/DnFfe0BvB3BIJjizpX3zblHZv3+1fc1LO7i",
	"obfT4Pcgept53k78rg398HWv/Qj/SLWvQySGqC6/B6+MNn/EqhGr3Gu8nVa/B7Wspvth4dZXpNsfhs2j",
	"8u7rU941r+w2+v3et8Bq+L/MK3ubzPxd39tRfBjJxe2QC/3JaL3MfS5FNtmb7E6uPl79dwAAAP//du0V",
	"znySAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
